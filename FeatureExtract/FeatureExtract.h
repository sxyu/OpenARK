#pragma once

#ifndef FEATUREEXTRACT_H
#define FEATUREEXTRACT_H
#include<vector>
#include<string>
#include<utility>
#include "opencv2/opencv.hpp"

namespace classifier {
    namespace features {
        /**
        * Default image extension
        */
        const std::string IMG_EXT = ".png";

        /**
        * Default text file extension
        */
        const std::string TXT_EXT = ".txt";

        /**
        * Names of the features extracted (not including circle sweep & histogram features)
        */
        const std::vector <std::string> REGULAR_FEATURE_NAMES =
        { "cont_peri", "cont_area", "cont_ext",
          "cont_diam",
          "hull_peri", "hull_area", "pixels_area",

          "cent_dist",
          "dist_mean", "dist_stdd",
          "depth_mean", "depth_stdd",
        };

        /**
        * Radii at which a circle sweep is performed during feature extraction
        */
        const std::vector <double> CIRCLE_SWEEP_RADII = { 0.1, 0.2, 0.4, 0.6, 0.9 };

        /**
        * Number of buckets in a histogram on the X or Y axis used during feature extraction
        */
        const int HISTOGRAM_XY_BUCKETS = 4;

        /**
        * Number of buckets in a histogram on the Z axis used during feature extraction
        */       
        const int HISTOGRAM_Z_BUCKETS = 16;

        /**
        * Given a depth image, computes the mean and variance of the depth values and the distances from center.
        * For use with feature extraction.
        * @param xyzMap the depth image
        * @param center the centroid location in ij coordinates
        * @param [out] avgdist average distance from centroid
        * @param [out] vardist variance of distances from centroid
        * @param [out] avgdepth average depth
        * @param [out] vardist variance of depth
        */
        void computeMeanAndVariance(const cv::Mat& xyzMap, cv::Vec3f center,
            double& avgdist, double& vardist, double& avgdepth, double& vardepth);

        /**
         * Load scaling information from a scaling file (scale.csv)
         * @param scalePath path to the scaling file
         * @returns a pointer to a feature scaling vector (needs to be manually deallocated)
         */
        std::vector<std::pair<double, double> > * loadScalingInfo(std::string scalePath);

        /** Extract features from a given depth map and contour.
         *  @param [in] depth the depth map
         *  @param [in] contour the contour, given as a vector of points
         *  @param scale optionally, a pointer to a feature scaling vector obtained from loadScalingInfo.
         *          If left as nullptr, will not scale.
         *  @param [in] depthFit optionally, a cv::mat containing the refitted & cleaned depth image. (using cleanImage)
         *          If not specified, the provided depth map will be cleaned and refitted automatically.
         *  @returns vector of features
         */
        std::vector<double> extractFeatures(const cv::Mat & depth, const std::vector<cv::Point> & contour,
            const std::vector<std::pair<double, double> > * scale = nullptr, const cv::Mat & depthFit = cv::Mat());

        /* Extract features from a test case called "testCaseName" (please include leading zeros in name)
         *  in the data directory "dataDir". Specify "scalePath" to perform feature scaling using data from a file.
         *  Use "depthPath", etc. to specify data directories (default values reflect structure generated by OpenARK test generator).
         *  @param testCaseName name of the test case
         *  @param dataDir path to the data directory
         *  @param scalePath optionally, a path to the scaling file (inferred from data directory by default)
         *  @param depthPath optionally, a path to the depth image directory (inferred from data directory by default)
         *  @param depthFitPath optionally, a path to the cleaned depth image directory (inferred from data directory by default)
         *  @param contourPath optionally, a path to the cleaned depth image directory (inferred from data directory by default)
         *  @returns vector of features
         */
        std::vector<double> extractFeatures(std::string testCaseName, std::string dataDir,
            std::string scalePath = "", std::string depthPath = "depth/", std::string depthFitPath = "depth_fit/", std::string contourPath = "contour/");

        /**
        * Get the total number of features that will be extracted (including regular, circle sweep, histogram features)
        * @returns the number of features
        */
        int getNumFeatures();
    }
}

#endif

